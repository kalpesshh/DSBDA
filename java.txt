from mrjob.job import MRJob
import re

class LogAnalysis(MRJob):
    
    def mapper(self, _, line):
        # Extract timestamp and log level from each log entry
        match = re.search(r'^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (\w+): (.+)$', line)
        if match:
            timestamp = match.group(1)
            log_level = match.group(2)
            yield log_level, (timestamp, 1)
    
    def reducer(self, log_level, values):
        total_count = 0
        min_timestamp = None
        max_timestamp = None
        
        for timestamp, count in values:
            total_count += count
            if min_timestamp is None or timestamp < min_timestamp:
                min_timestamp = timestamp
            if max_timestamp is None or timestamp > max_timestamp:
                max_timestamp = timestamp
        
        yield log_level, {
            'count': total_count,
            'min_timestamp': min_timestamp,
            'max_timestamp': max_timestamp
        }

if _name_ == '_main_':
    LogAnalysis.run()


















import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import java.io.IOException;
import java.util.StringTokenizer;

public class WordCount {

    public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable> {

        private final static IntWritable ONE = new IntWritable(1);
        private Text word = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            StringTokenizer tokenizer = new StringTokenizer(value.toString());
            while (tokenizer.hasMoreTokens()) {
                word.set(tokenizer.nextToken());
                context.write(word, ONE);
            }
        }
    }

    public static class IntSumReducer extends Reducer<Text, IntWritable, Text, IntWritable> {

        private IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable value : values) {
                sum += value.get();
            }
            result.set(sum);
            context.write(key, result);
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Word Count");
        job.setJarByClass(WordCount.class);
        job.setMapperClass(TokenizerMapper.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}











from mrjob.job import MRJob

class WeatherAnalysis(MRJob):
    
    def mapper(self, _, line):
        if not line.startswith("Date"):  # Skip the header line
            _, temperature, dew_point, wind_speed = line.strip().split(",")
            yield "Weather", (float(temperature), float(dew_point), float(wind_speed))
    
    def reducer(self, key, values):
        total_temperature = 0
        total_dew_point = 0
        total_wind_speed = 0
        count = 0
        
        for temperature, dew_point, wind_speed in values:
            total_temperature += temperature
            total_dew_point += dew_point
            total_wind_speed += wind_speed
            count += 1
        
        avg_temperature = total_temperature / count
        avg_dew_point = total_dew_point / count
        avg_wind_speed = total_wind_speed / count
        
        yield key, {
            'avg_temperature': avg_temperature,
            'avg_dew_point': avg_dew_point,
            'avg_wind_speed': avg_wind_speed
        }

if _name_ == '_main_':
    WeatherAnalysis.run()
















